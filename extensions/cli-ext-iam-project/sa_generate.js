import { Command } from '@hyperone/cli-framework';
import { openapi } from '@hyperone/cli-core';
import fs from 'fs';

import forge from 'node-forge';
const { rsa, ssh, pki } = forge;

const generateKeyPair = () => new Promise((resolve, reject) =>
    rsa.generateKeyPair({
        bits: 2048,
        workers: -1,
    }, (err, keypair) => {
        if (err) {
            return reject(err);
        }
        return resolve(keypair);
    })
);

const publicKeyToOpenSSH = (publicKey, comment = 'autogenerated') => ssh.publicKeyToOpenSSH(publicKey, comment);

export default new Command({
    name: 'generate',
    summary: 'Generate passport file for sa',
    options: [
        { name: 'sa', required: true },
        { name: 'name', required: true },
        { name: 'project', required: true, defaultSource: 'project' },
        { name: 'passport-output-file', required: true },
    ],
    handler: async (opts) => {
        const optsAll = opts._all || opts;
        const { publicKey, privateKey } = await generateKeyPair();
        const parameters = {
            projectId: optsAll.project,
            saId: optsAll.sa,
        };
        const result = await opts.api.post(openapi.getUrl('/iam/project/{projectId}/sa/{saId}/credential', parameters), {
            json: {
                name: optsAll.name,
                type: 'ssh',
                value: publicKeyToOpenSSH(publicKey),
            },
        });
        const subject_id = openapi.renderPath('/iam/project/{projectId}/sa/{saId}', parameters);
        const jwk = {
            subject_id,
            certificate_id: result.bodyJson.id,
            issuer: openapi.getUrl(subject_id),
            private_key: pki.privateKeyToPem(privateKey),
            public_key: pki.publicKeyToPem(publicKey),
        };
        const outfile = optsAll['passport-output-file'];
        opts.logger.info(`Save passport to file '${outfile}'`);
        await fs.promises.writeFile(outfile, JSON.stringify(jwk, null, 4));
        return result.bodyJson;
    },
});
